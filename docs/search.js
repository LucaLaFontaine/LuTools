window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "eps_tools", "modulename": "eps_tools", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eps_tools.generators", "modulename": "eps_tools.generators", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eps_tools.generators.graph", "modulename": "eps_tools.generators.graph", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eps_tools.generators.graph.Graph", "modulename": "eps_tools.generators.graph", "qualname": "Graph", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "eps_tools.generators.graph.Graph.__init__", "modulename": "eps_tools.generators.graph", "qualname": "Graph.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span></span>)</span>"}, {"fullname": "eps_tools.generators.graph.Graph.config", "modulename": "eps_tools.generators.graph", "qualname": "Graph.config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.generators.graph.Graph.title", "modulename": "eps_tools.generators.graph", "qualname": "Graph.title", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.generators.graph.Graph.cols", "modulename": "eps_tools.generators.graph", "qualname": "Graph.cols", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.generators.graph.Graph.xTitle", "modulename": "eps_tools.generators.graph", "qualname": "Graph.xTitle", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.generators.graph.Graph.yTitle", "modulename": "eps_tools.generators.graph", "qualname": "Graph.yTitle", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.generators.graph.Plot", "modulename": "eps_tools.generators.graph", "qualname": "Plot", "kind": "class", "doc": "<p></p>\n", "bases": "Graph"}, {"fullname": "eps_tools.generators.graph.Plot.__init__", "modulename": "eps_tools.generators.graph", "qualname": "Plot.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span></span>)</span>"}, {"fullname": "eps_tools.generators.graph.Plot.parent", "modulename": "eps_tools.generators.graph", "qualname": "Plot.parent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.generators.graph.Plot.config", "modulename": "eps_tools.generators.graph", "qualname": "Plot.config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.generators.graph.Plot.df", "modulename": "eps_tools.generators.graph", "qualname": "Plot.df", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.generators.graph.Plot.title", "modulename": "eps_tools.generators.graph", "qualname": "Plot.title", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.generators.graph.Plot.xTitle", "modulename": "eps_tools.generators.graph", "qualname": "Plot.xTitle", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.generators.graph.Plot.yTitle", "modulename": "eps_tools.generators.graph", "qualname": "Plot.yTitle", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.generators.graph.Plot.width", "modulename": "eps_tools.generators.graph", "qualname": "Plot.width", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.generators.graph.Plot.height", "modulename": "eps_tools.generators.graph", "qualname": "Plot.height", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.generators.graph.Plot.lineColours", "modulename": "eps_tools.generators.graph", "qualname": "Plot.lineColours", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.generators.graph.Plot.margin", "modulename": "eps_tools.generators.graph", "qualname": "Plot.margin", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.generators.graph.Plot.createPlot", "modulename": "eps_tools.generators.graph", "qualname": "Plot.createPlot", "kind": "function", "doc": "<p>Creates a plot in the EPS style. Most of this crap is formatting\nWe add here the trendline(s), the legend, x/y axes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.generators.graph.Plot.addLine", "modulename": "eps_tools.generators.graph", "qualname": "Plot.addLine", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.generators.graph.Plot.formatXAxis", "modulename": "eps_tools.generators.graph", "qualname": "Plot.formatXAxis", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.generators.graph.Plot.timeFormatXAxis", "modulename": "eps_tools.generators.graph", "qualname": "Plot.timeFormatXAxis", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.generators.graph.Plot.formatYAxis", "modulename": "eps_tools.generators.graph", "qualname": "Plot.formatYAxis", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.generators.graph.Plot.scaleDTick", "modulename": "eps_tools.generators.graph", "qualname": "Plot.scaleDTick", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.generators.graph.Plot.setYAxisRange", "modulename": "eps_tools.generators.graph", "qualname": "Plot.setYAxisRange", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.generators.graph.Plot.createTimeline", "modulename": "eps_tools.generators.graph", "qualname": "Plot.createTimeline", "kind": "function", "doc": "<p>Creates a standalone timeline from a supplied events DataFrame  </p>\n\n<p>Paramaters:\ndf: DataFrame, Required</p>\n\n<blockquote>\n  <p>Should be format: ['Timsetamp', 'Name']. <br />\n  It only takes the first 2 columns so you can put like a description or whatever after. Eventually a description willl be rolled into hover text</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.generators.ppt_gen", "modulename": "eps_tools.generators.ppt_gen", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eps_tools.generators.ppt_gen.PPTGen", "modulename": "eps_tools.generators.ppt_gen", "qualname": "PPTGen", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "eps_tools.generators.ppt_gen.PPTGen.__init__", "modulename": "eps_tools.generators.ppt_gen", "qualname": "PPTGen.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span></span>)</span>"}, {"fullname": "eps_tools.generators.ppt_gen.PPTGen.parent", "modulename": "eps_tools.generators.ppt_gen", "qualname": "PPTGen.parent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.generators.ppt_gen.PPTGen.ppt", "modulename": "eps_tools.generators.ppt_gen", "qualname": "PPTGen.ppt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.generators.ppt_gen.PPTGen.slideCtr", "modulename": "eps_tools.generators.ppt_gen", "qualname": "PPTGen.slideCtr", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.generators.ppt_gen.PPTGen.addSlide", "modulename": "eps_tools.generators.ppt_gen", "qualname": "PPTGen.addSlide", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.generators.ppt_gen.PPTGen.savePPT", "modulename": "eps_tools.generators.ppt_gen", "qualname": "PPTGen.savePPT", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pptTitle</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.generators.ppt_gen.PPTGen.ExPSStyleName", "modulename": "eps_tools.generators.ppt_gen", "qualname": "PPTGen.ExPSStyleName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.loader", "modulename": "eps_tools.loader", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eps_tools.loader.db_loader", "modulename": "eps_tools.loader.db_loader", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eps_tools.loader.db_loader.create_db", "modulename": "eps_tools.loader.db_loader", "qualname": "create_db", "kind": "function", "doc": "<p>create a database connection to a SQLite database</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.loader.db_loader.create_conn", "modulename": "eps_tools.loader.db_loader", "qualname": "create_conn", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.loader.db_loader.create_table", "modulename": "eps_tools.loader.db_loader", "qualname": "create_table", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"n\">table_name</span>, </span><span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.loader.db_loader.load", "modulename": "eps_tools.loader.db_loader", "qualname": "load", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"n\">table_name</span>, </span><span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.loader.db_loader.dedupe", "modulename": "eps_tools.loader.db_loader", "qualname": "dedupe", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"n\">dedupe_cols</span>, </span><span class=\"param\"><span class=\"n\">table_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.loader.db_loader.close_conn", "modulename": "eps_tools.loader.db_loader", "qualname": "close_conn", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.loader.db_loader.ts2str", "modulename": "eps_tools.loader.db_loader", "qualname": "ts2str", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">col</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.loader.file_loader", "modulename": "eps_tools.loader.file_loader", "kind": "module", "doc": "<p>The file_loader module provides functions used to load data from files (excel, csv, pdf, etc) or into files.</p>\n"}, {"fullname": "eps_tools.loader.file_loader.import_config", "modulename": "eps_tools.loader.file_loader", "qualname": "import_config", "kind": "function", "doc": "<p>Import all config files from the supplied folder. Defaults to the root folder  </p>\n\n<p>Any files ending in 'config.yaml' or 'config.xlsx' will be treated. So you could have a formatting config called 'format.config.yaml'  </p>\n\n<p><strong>Parameters:</strong></p>\n\n<blockquote>\n  <p><strong>configFolder: <em>string, default: empty</em></strong>  </p>\n  \n  <blockquote>\n    <p>The relative path to the config folder. Recursive, so it'll find the files if their anywhere in this directory</p>\n  </blockquote>\n</blockquote>\n\n<p><strong>Returns:</strong>  </p>\n\n<blockquote>\n  <p><strong>dict</strong></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">configFolder</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.loader.file_loader.getFiles", "modulename": "eps_tools.loader.file_loader", "qualname": "getFiles", "kind": "function", "doc": "<p>Get list of all files in a supplied path. Can pass file types  </p>\n\n<p><strong>Parameters:</strong>  </p>\n\n<blockquote>\n  <p><strong>path: <em>string, default: empty</em></strong>  </p>\n  \n  <blockquote>\n    <p>Pass a relative or absolute path</p>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <p><strong>recursive: <em>bool, default: False</em></strong>  </p>\n  \n  <blockquote>\n    <p>If True search recursively, meaning it will search the folder supplied and any subfolders.</p>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <p><strong>fileTypes: <em>list, default: empty list</em></strong>  </p>\n  \n  <blockquote>\n    <p>Example: ['.xlsx', '.xls']</p>\n  </blockquote>\n</blockquote>\n\n<p><a href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">Click here for more info</a></p>\n\n<p><strong>Returns:</strong>  </p>\n\n<blockquote>\n  <p><strong>list</strong></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">&#39;*&#39;</span>, </span><span class=\"param\"><span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">fileTypes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.loader.file_loader.getExcelDFs", "modulename": "eps_tools.loader.file_loader", "qualname": "getExcelDFs", "kind": "function", "doc": "<p>Import all Excel files from a path into a list of DataFrames  </p>\n\n<p><strong>Parameters:</strong></p>\n\n<blockquote>\n  <p><strong>path: <em>string, default: \"*\"</em></strong>  </p>\n  \n  <blockquote>\n    <p>Pass a relative or absolute path</p>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <p><strong>recursive: <em>bool, default: False</em></strong>  </p>\n  \n  <blockquote>\n    <p>If True search recursively, meaning it will search the folder supplied and any subfolders.</p>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <p><strong>verbose: <em>bool, default: False</em></strong>  </p>\n  \n  <blockquote>\n    <p>If True prints each file as it's being imported.</p>\n  </blockquote>\n</blockquote>\n\n<p><strong>Returns:</strong>  </p>\n\n<blockquote>\n  <p><strong>list of DataFrames</strong></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">&#39;*&#39;</span>, </span><span class=\"param\"><span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.reporters", "modulename": "eps_tools.reporters", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eps_tools.reporters.ExPS", "modulename": "eps_tools.reporters.ExPS", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eps_tools.reporters.ExPS.ExPS", "modulename": "eps_tools.reporters.ExPS", "qualname": "ExPS", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "eps_tools.reporters.ExPS.ExPS.config", "modulename": "eps_tools.reporters.ExPS", "qualname": "ExPS.config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.reporters.ExPS.ExPS.plant", "modulename": "eps_tools.reporters.ExPS", "qualname": "ExPS.plant", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.reporters.ExPS.ExPS.graphs", "modulename": "eps_tools.reporters.ExPS", "qualname": "ExPS.graphs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.reporters.ExPS.ExPS.getSQL", "modulename": "eps_tools.reporters.ExPS", "qualname": "ExPS.getSQL", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.reporters.ExPS.ExPS.getExcel", "modulename": "eps_tools.reporters.ExPS", "qualname": "ExPS.getExcel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.reporters.ExPS.ExPS.createPPT", "modulename": "eps_tools.reporters.ExPS", "qualname": "ExPS.createPPT", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.reporters.ExPS.ExPS.savePPT", "modulename": "eps_tools.reporters.ExPS", "qualname": "ExPS.savePPT", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.reporters.ExPS.Graph", "modulename": "eps_tools.reporters.ExPS", "qualname": "Graph", "kind": "class", "doc": "<p></p>\n", "bases": "eps_tools.generators.graph.Graph"}, {"fullname": "eps_tools.reporters.ExPS.Graph.__init__", "modulename": "eps_tools.reporters.ExPS", "qualname": "Graph.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span>, </span><span class=\"param\"><span class=\"n\">config</span></span>)</span>"}, {"fullname": "eps_tools.reporters.ExPS.Graph.parent", "modulename": "eps_tools.reporters.ExPS", "qualname": "Graph.parent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.reporters.ExPS.Graph.NPThreshold", "modulename": "eps_tools.reporters.ExPS", "qualname": "Graph.NPThreshold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.reporters.ExPS.Graph.numWeeks", "modulename": "eps_tools.reporters.ExPS", "qualname": "Graph.numWeeks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.reporters.ExPS.Graph.col", "modulename": "eps_tools.reporters.ExPS", "qualname": "Graph.col", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.reporters.ExPS.Graph.plot", "modulename": "eps_tools.reporters.ExPS", "qualname": "Graph.plot", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.reporters.ExPS.Graph.setDf", "modulename": "eps_tools.reporters.ExPS", "qualname": "Graph.setDf", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.reporters.ExPS.Graph.setLowAchieved", "modulename": "eps_tools.reporters.ExPS", "qualname": "Graph.setLowAchieved", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.reporters.ExPS.Graph.setLowPercentage", "modulename": "eps_tools.reporters.ExPS", "qualname": "Graph.setLowPercentage", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.reporters.ExPS.Graph.setAvgProd", "modulename": "eps_tools.reporters.ExPS", "qualname": "Graph.setAvgProd", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rows</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.reporters.ExPS.Graph.getNRowAvg", "modulename": "eps_tools.reporters.ExPS", "qualname": "Graph.getNRowAvg", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dfCol</span>, </span><span class=\"param\"><span class=\"n\">rows</span>, </span><span class=\"param\"><span class=\"n\">ascending</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.reporters.ExPS.Graph.setDowntimeEvents", "modulename": "eps_tools.reporters.ExPS", "qualname": "Graph.setDowntimeEvents", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dropEventsBelowNRows</span><span class=\"o\">=</span><span class=\"mi\">16</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.reporters.ExPS.DowntimeEvent", "modulename": "eps_tools.reporters.ExPS", "qualname": "DowntimeEvent", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "eps_tools.reporters.ExPS.DowntimeEvent.__init__", "modulename": "eps_tools.reporters.ExPS", "qualname": "DowntimeEvent.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span>, </span><span class=\"param\"><span class=\"n\">dates</span></span>)</span>"}, {"fullname": "eps_tools.reporters.ExPS.DowntimeEvent.parent", "modulename": "eps_tools.reporters.ExPS", "qualname": "DowntimeEvent.parent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.reporters.ExPS.DowntimeEvent.startTime", "modulename": "eps_tools.reporters.ExPS", "qualname": "DowntimeEvent.startTime", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.reporters.ExPS.DowntimeEvent.endTime", "modulename": "eps_tools.reporters.ExPS", "qualname": "DowntimeEvent.endTime", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.reporters.ExPS.DowntimeEvent.eventDurationHours", "modulename": "eps_tools.reporters.ExPS", "qualname": "DowntimeEvent.eventDurationHours", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.reporters.ExPS.DowntimeEvent.setTargets", "modulename": "eps_tools.reporters.ExPS", "qualname": "DowntimeEvent.setTargets", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.reporters.ExPS.DowntimeEvent.setAvgNonProd", "modulename": "eps_tools.reporters.ExPS", "qualname": "DowntimeEvent.setAvgNonProd", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.reporters.ExPS.Plot", "modulename": "eps_tools.reporters.ExPS", "qualname": "Plot", "kind": "class", "doc": "<p></p>\n", "bases": "eps_tools.generators.graph.Plot"}, {"fullname": "eps_tools.reporters.ExPS.Plot.__init__", "modulename": "eps_tools.reporters.ExPS", "qualname": "Plot.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span></span>)</span>"}, {"fullname": "eps_tools.reporters.ExPS.Plot.parent", "modulename": "eps_tools.reporters.ExPS", "qualname": "Plot.parent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "eps_tools.reporters.ExPS.Plot.addLegendLabels", "modulename": "eps_tools.reporters.ExPS", "qualname": "Plot.addLegendLabels", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.reporters.ExPS.Plot.addAvgProdLine", "modulename": "eps_tools.reporters.ExPS", "qualname": "Plot.addAvgProdLine", "kind": "function", "doc": "<p>Add the avgProd and lowAcheived indicators to the graph\nCurrently the figure is not supplied/returned, that'll have to change for abstraction</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.reporters.ExPS.Plot.addLowAchievedLine", "modulename": "eps_tools.reporters.ExPS", "qualname": "Plot.addLowAchievedLine", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.reporters.ExPS.Plot.addWTAPSchedule", "modulename": "eps_tools.reporters.ExPS", "qualname": "Plot.addWTAPSchedule", "kind": "function", "doc": "<p>Add the specific WTAP production count indicators</p>\n\n<p>Currently the figure is not supplied/returned, that'll have to change for abstraction</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.reporters.ExPS.Plot.createDTEventLabel", "modulename": "eps_tools.reporters.ExPS", "qualname": "Plot.createDTEventLabel", "kind": "function", "doc": "<p>Create downtime labels downtime event (list of dicts)\nAdds them directly to the passed figure\nCurrently the figure is not returned, that'll have to change for abstraction</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.reporters.ExPS.Plot.granulizeData", "modulename": "eps_tools.reporters.ExPS", "qualname": "Plot.granulizeData", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">series</span>, </span><span class=\"param\"><span class=\"n\">start</span>, </span><span class=\"param\"><span class=\"n\">end</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.reporters.ExPS.Plot.showLastYear", "modulename": "eps_tools.reporters.ExPS", "qualname": "Plot.showLastYear", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dfAll</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.reporters.ExPS.Plot.showLastWeek", "modulename": "eps_tools.reporters.ExPS", "qualname": "Plot.showLastWeek", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dfAll</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.wrangler", "modulename": "eps_tools.wrangler", "kind": "module", "doc": "<p>The wrangler sub module is for tools to 'wrangle' data, meaning to clean, organize, or otherwise make data useable</p>\n"}, {"fullname": "eps_tools.wrangler.time_tools", "modulename": "eps_tools.wrangler.time_tools", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eps_tools.wrangler.time_tools.str2dt", "modulename": "eps_tools.wrangler.time_tools", "qualname": "str2dt", "kind": "function", "doc": "<p>Finds the timestamp in a dataframe, translates it to_datetime, renames it \"Timestamp\", and sets it as the index\nBumps the index to the first column if it isn't a timestamp</p>\n\n<p>Parameters:\ndf: DataFrame, required\ntimeCol: string, Default: empty</p>\n\n<p>Returns: DataFrame</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">timeCol</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">drop</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">datetime_args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.wrangler.time_tools.getLastNWeeks", "modulename": "eps_tools.wrangler.time_tools", "qualname": "getLastNWeeks", "kind": "function", "doc": "<p>Get the last n weeks of data starting this past 'weekday' where (0=Monday, 6=Sunday)\nIt's important that the timestamp is already in the index</p>\n\n<p>Parameters:\ndf: DataFrame, required\nn: int, required\nweekday: int, Default 0 (0=Monday, 6=Sunday)</p>\n\n<p>Returns: DataFrame</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">n</span>, </span><span class=\"param\"><span class=\"n\">weekday</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">hour</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">minute</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.wrangler.time_tools.overlayPast", "modulename": "eps_tools.wrangler.time_tools", "qualname": "overlayPast", "kind": "function", "doc": "<p>Run if you want to overlay last year's consumption on the graph. Controlled in the config.\nCurrently the figure is not supplied/returned, that'll have to change for abstraction</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">nDays</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.wrangler.wrangler", "modulename": "eps_tools.wrangler.wrangler", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "eps_tools.wrangler.wrangler.get100LowestValues", "modulename": "eps_tools.wrangler.wrangler", "qualname": "get100LowestValues", "kind": "function", "doc": "<p>Gets the 100 lowest values from each column provided in df\nIt will filter anything lower than minVal, so it'll ignore negative or blank values if minVal=1</p>\n\n<p>Parameters:\ndf: DataFrame, required\nminVal: int, default: 1  </p>\n\n<p>Returns: DataFrame</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">minVal</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.wrangler.wrangler.getNRowAvg", "modulename": "eps_tools.wrangler.wrangler", "qualname": "getNRowAvg", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">rows</span>, </span><span class=\"param\"><span class=\"n\">ascending</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.wrangler.wrangler.gapAndIsland", "modulename": "eps_tools.wrangler.wrangler", "qualname": "gapAndIsland", "kind": "function", "doc": "<p>Should be renamed to gapAndIsland\ntakes an np.series data type (ie. a df single column)\nreturns the entire column broken up into sections where all the numbers are the same. \nGood for iterating on an events column or tracking flags. </p>\n\n<p>new: dfCol can be df with one column or series</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dfCol</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.wrangler.wrangler.mergeCloseEvents", "modulename": "eps_tools.wrangler.wrangler", "qualname": "mergeCloseEvents", "kind": "function", "doc": "<p>Merges events that are close so we don't get bunches of events. Not entirely necessary but it makes it cleaner. \nRecursive function, so it takes each event and calculates if it's within 3600sec of the last event. \nIf so it adds this event to the last event and deletes this event.\nreturns the new list of events</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">events</span>, </span><span class=\"param\"><span class=\"n\">mergeWithinHours</span><span class=\"o\">=</span><span class=\"mi\">12</span>, </span><span class=\"param\"><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "eps_tools.wrangler.wrangler.extendTags", "modulename": "eps_tools.wrangler.wrangler", "qualname": "extendTags", "kind": "function", "doc": "<p>Use to extend a list of tags (usually tags in an EMS or files) for one grouping into many\nSay you have 5 tags each for 10 AHUs that you have to pull. Use this to generate all 50 tags from the first 5</p>\n\n<p>Parameters:\ntags: list, Required\nmaxNum: int, Required, largest number in the set\nexampleNum: int, Default: 1, number you're replacing in the exmple set\nmissing: list, Default: empty, any missing numbers in the set</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tags</span>, </span><span class=\"param\"><span class=\"n\">maxNum</span>, </span><span class=\"param\"><span class=\"n\">exampleNum</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">missing</span><span class=\"o\">=</span><span class=\"p\">[]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();